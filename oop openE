#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<fstream>
using namespace std;

class Student{
public:
    int Student_Id;
    string Email;
    vector<string>Enr_Crs;

    void Enroll_courses(string course, ofstream& outFile){
        Enr_Crs.push_back(course);
        cout << "Courses Enrolled are " << course << endl;
        outFile << "Courses Enrolled are " << course << endl;
    }
    void Drop_course(string course, ofstream& outFile){
        for(int i=0;i<Enr_Crs.size();i++){
            Enr_Crs.erase(Enr_Crs.begin()+i);
        }
        cout << "Course erased is " << course << endl;
        outFile << "Course erased is " << course << endl;
    }
    void ViewCourses(ofstream& outFile){
        if(!Enr_Crs.empty()){
            for (const auto& course : Enr_Crs) {
                cout << "Courses are "<< course << endl;
                outFile << "Courses are "<< course << endl;
            }
        }
    }
};
class Teacher {
private:
    string teacherID;
    string name;
    string email;
    vector<string> coursesTaught;

public:
    Teacher(string id, string n, string e) : teacherID(id), name(n), email(e) {}

    string getTeacherID() const {
        return teacherID;
    }

    string getName() const {
        return name;
    }

    string getEmail() const {
        return email;
    }

    void assignCourse(const string& course, ofstream& outFile) {
        coursesTaught.push_back(course);
        cout << name << " assigned to teach " << course << endl;
        outFile << name << " assigned to teach " << course << endl;
    }

    void removeCourse(const string& course, ofstream& outFile) {
        coursesTaught.erase(remove(coursesTaught.begin(), coursesTaught.end(), course), coursesTaught.end());
        cout << name << " removed from teaching " << course << endl;
        outFile << name << " removed from teaching " << course << endl;
    }

    void viewCourses(ofstream& outFile) const {
        cout << name << "'s assigned courses:" << endl;
        outFile << name << "'s assigned courses:" << endl;
        for (const auto& course : coursesTaught) {
            cout << course << endl;
            outFile << course << endl;
        }
    }
};

class Course {
private:
    string courseCode;
    string courseName;
    Teacher* teacher;
    vector<string> studentsEnrolled;
    int maxCapacity;

public:
    Course(const string& code, const string& name, Teacher* teacher, int capacity): courseCode(code), courseName(name), teacher(teacher), maxCapacity(capacity) {}

    void addStudent(const string& studentID, ofstream& outFile) {
        if (studentsEnrolled.size() < maxCapacity) {
            studentsEnrolled.push_back(studentID);
            cout << "Student with ID " << studentID << " enrolled in " << courseName << endl;
            outFile << "Student with ID " << studentID << " enrolled in " << courseName << endl;
        } else {
            cout << "Course " << courseName << " is full. Cannot enroll more students." << endl;
            outFile << "Course " << courseName << " is full. Cannot enroll more students." << endl;
        }
    }

    void removeStudent(const string& studentID, ofstream& outFile) {
        auto it = find(studentsEnrolled.begin(), studentsEnrolled.end(), studentID);
        if (it != studentsEnrolled.end()) {
            studentsEnrolled.erase(it);
            cout << "Student with ID " << studentID << " removed from " << courseName << endl;
            outFile << "Student with ID " << studentID << " removed from " << courseName << endl;
        } else {
            cout << "Student with ID " << studentID << " not found in " << courseName << endl;
            outFile << "Student with ID " << studentID << " not found in " << courseName << endl;
        }
    }

    void viewStudents(ofstream& outFile) const {
        cout << "Students enrolled in " << courseName << ":" << endl;
        outFile << "Students enrolled in " << courseName << ":" << endl;
        for (const auto& student : studentsEnrolled) {
            cout << student << endl;
            outFile << student << endl;
        }
    }
};
